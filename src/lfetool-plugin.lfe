;;;; This module serves a dual purpose:
;;;;   * providing functions useful for working with lfetool plugins, and
;;;;   * defining a behaviour -- 'lfetool-plugin' -- to be used by plugin
;;;;     implementations.
;;;;
(defmodule lfetool-plugin
  (export all))

;;; The following defines the lfetool-plugin behaviour. It should be used
;;; by all lfetool plugins.
;;;
;;; Example usage for ~/.lfetool/plugins/my-thing/lfetool-plugin-my-thing.lfe:
;;;
;;;  (defmodule lfetool-plugin-my-thing
;;;    (behaviour lfetool-plugin)
;;;    (export all))
;;;
;;; Note that LFE currently doesn't add any checks for missing functions when
;;; compiling modules implementing behaviours. For now, writing lfetool plugins
;;; using standard a behaviour accomplishes two things: 1) practicing good
;;; programming etiquitte, and 2) future-proofing for when the LFE compiler does
;;; support it.
;;;
;;; The authors of lfetool accomplish one primary thing by providing the
;;; behaviour and encouraging developers to use it: codification of plugin
;;; development.
;;;
(defun behaviour_info
  (('callbacks)
    '(
      #(get-name 0)
      #(get-description 0)
      #(get-help 0)
      #(new 1)
      #(get-commands 0)))
  ((_)
   'undefined))

(defun get-plugin-module (name)
  (lfe-utils:atom-cat
    (list_to_atom (lfetool-const:plugin-module-prefix))
    name))

(defun get-plugins-src ()
  (lists:merge
    (filelib:wildcard
      (lfetool-const:plugin-src))
    (filelib:wildcard
      (lfe-utils:expand-home-dir
        (lfetool-const:plugin-usr-src)))))

(defun compile-plugins ()
  (compile-plugins
    (lfe-utils:expand-home-dir
      (lfetool-const:plugin-ebin))))

(defun compile-plugins
  (('show-output)
    (lfe_io:format "~p~n" (list (compile-plugins))))
  ((out-dir)
    (lfe-utils:compile
      (get-plugins-src)
      (lfe-utils:get-deps)
      out-dir)))

(defun get-plugin-beams ()
  "Get the compile .beam files, but without the .beam extension. The list of
  files generated by this function are meant to be consumed by (code:load_abs)."
  (lists:map
    #'filename:rootname/1
    (filelib:wildcard
      (lfe-utils:expand-home-dir
        (lfetool-const:plugin-beams)))))

(defun load-plugins ()
  (lists:map
    #'code:load_abs/1
    (get-plugin-beams)))

(defun get-loaded-plugins ()
  (lfetool-util:filtered-loaded-modules
    (lfetool-const:plugin-module-prefix)))

(defun get-loaded-plugin-modules ()
  (lists:map
    (lambda (x) (element 1 x))
    (get-loaded-plugins)))
