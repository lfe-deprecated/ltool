;;;; This module serves a dual purpose:
;;;;   * providing functions useful for working with lfetool plugins, and
;;;;   * defining a behaviour -- 'lfetool-plugin' -- to be used by plugin
;;;;     implementations.
;;;;
(defmodule lfetool-plugin
  (export all))

;;; The following defines the lfetool-plugin behaviour. It should be used
;;; by all lfetool plugins.
;;;
;;; Example usage for ~/.lfetool/plugins/my-thing/lfetool-plugin-my-thing.lfe:
;;;
;;;  (defmodule lfetool-plugin-my-thing
;;;    (behaviour lfetool-plugin)
;;;    (export all))
;;;
;;; Note that LFE currently doesn't add any checks for missing functions when
;;; compiling modules implementing behaviours. For now, writing lfetool plugins
;;; using standard a behaviour accomplishes two things: 1) practicing good
;;; programming etiquitte, and 2) future-proofing for when the LFE compiler does
;;; support it.
;;;
;;; The authors of lfetool accomplish one primary thing by providing the
;;; behaviour and encouraging developers to use it: codification of plugin
;;; development.
;;;
(defun behaviour_info
  (('callbacks)
    '(
      #(get-name 0)
      #(get-description 0)
      #(get-help 0)
      #(new 1)
      #(get-commands 0)))
  ((_)
   'undefined))

(defun get-plugin-module (name)
  (get-plugin-module 'name name))

;; XXX this isn't such a good implementation; it's based on a file naming
;; scheme... if that ever changes, this will no longer work as expected.
;; better to perform some sort of lookup on existing/loaded plugins, searching
;; by name and then returning the module for that plugin
(defun get-plugin-module
  (('name name)
    (lutil-type:atom-cat
      (list_to_atom (lfetool-const:plugin-module-prefix))
      name))
  (('beam beam)
   'noop
   ))

(defun get-plugins-src ()
  (lists:merge
    (filelib:wildcard
      (lfetool-const:plugin-src))
    (filelib:wildcard
      (lutil-file:expand-home-dir
        (lfetool-const:plugin-usr-src)))))

(defun compile-plugins ()
  (compile-plugins
    (lutil-file:expand-home-dir
      (lfetool-const:plugin-ebin))))

(defun compile-plugins
  (('show-output)
    (lfe_io:format "~p~n" (list (compile-plugins))))
  ((out-dir)
    (lutil-file:compile
      (get-plugins-src)
      (lutil-file:get-deps)
      out-dir)))

(defun get-plugin-beam (plugin-name)
  "Given an atom representing a plugin's name, return the full path to the
  .beam file which it compiled to, minus the .beam extension. The output from
  this function is meant to be consumed by (beam_lib:chunk ...)."
  (filename:rootname
    (car
      (filelib:wildcard
        (lutil-file:expand-home-dir
          (++ (lfetool-const:plugin-ebin)
              "/"
              (atom_to_list
                (lfetool-plugin:get-plugin-module plugin-name))
              "*"))))))

(defun get-plugin-attributes
  ;; Given an atom representing a plugin's name, return its module
  ;; attributes.
  (('name plugin-name)
    (beam_lib:chunks
      (get-plugin-beam plugin-name)
      '(attributes)))
  (('beam plugin-beam)
    (beam_lib:chunks plugin-beam '(attributes)))
  ((type _)
    #(error unsupported-type)))

(defun get-plugin-behaviour
  ;; This function handles three cases:
  ;;  1) if passed a list (assumed to be a list of #(module beam) tuples),
  ;;     iterate through the list, calling get-plugin-behaviour on each tuple;
  ;;  2) if passed a tuple, destructure and check the behaviour of the beam;
  ;;  3) if passed anything else, assume a plugin name, and check the behaviour
  ;;     of the plugin.
  ((beams) (when (is_list beams))
   (lists:map
     #'get-plugin-behaviour/1
     beams))
  (((tuple module plugin-beam))
   (get-plugin-behaviour 'beam plugin-beam))
  ((plugin-name)
   (get-plugin-behaviour 'name plugin-name)))

(defun get-plugin-behaviour (type plugin-name-or-beam)
  "Get the behaviour of a plugin. The parameter 'type' may be given as either
  the atom 'name or 'beam."
  (let (((tuple 'ok (tuple _ (list (tuple 'attributes attrs))))
         (get-plugin-attributes type plugin-name-or-beam)))
    (proplists:get_value
      'behaviour
      attrs
      (proplists:get_value 'behavior attrs))))

(defun get-plugin-beams ()
  "Get the compiled .beam files, but without the .beam extension. The list of
  files generated by this function are meant to be consumed by (code:load_abs)."
  (lists:map
    #'filename:rootname/1
    (filelib:wildcard
      (lutil-file:expand-home-dir
        (lfetool-const:plugin-beams)))))

(defun check-skip-funcs (funcs)
  (lists:map
    (match-lambda
      (((tuple func arity))
        (case (re:run (atom_to_list func) (lfetool-const:skip-test-patt))
          ((tuple 'match _) `#(,func ,arity))
          (_ 'false))))
    funcs))

(defun check-skipped-tests (funcs)
  (lists:map
    (match-lambda
      (((tuple func arity))
        (case (re:split (atom_to_list func)
                        (++ (lfetool-const:skip-test-group-patt))
                        '(#(return list)))
          ((list '() test-name _ '()) test-name)
          (_ 'false))))
    funcs))

(defun get-skip-funcs (module)
  (lutil-file:filtered
    #'check-skip-funcs/1
    (lutil-file:get-module-exports module)))

(defun get-skipped-tests (module)
  (lutil-file:filtered
    #'check-skipped-tests/1
    (lutil-file:get-module-exports module)))

(defun load-plugins ()
  (lutil-file:load-beams
    (get-plugin-beams)))

(defun get-loaded-plugins ()
  (lutil-file:filtered-loaded-modules
    (lfetool-const:plugin-module-prefix)))

(defun plugin?
  (((tuple module beam))
    (lists:member
      (lfetool-const:plugin-behaviour)
      (get-plugin-behaviour 'beam beam))))

(defun cmd-help?
  (((tuple module beam))
    (lists:member
      (lfetool-const:cmd-help-behaviour)
      (get-plugin-behaviour 'beam beam))))

(defun check-implements
  ((pred beams) (when (is_list beams))
   (lists:map
     (match-lambda
       (((= (tuple module beam) data))
        (case (funcall pred data)
          ('false 'false)
          (_ beam))))
     beams)))

(defun check-implements-plugin (beams)
  (check-implements #'plugin?/1 beams))

(defun check-implements-cmd-help (beams)
  (check-implements #'cmd-help?/1 beams))

(defun filtered-plugins (beams)
  (lutil-file:filtered #'check-implements-plugin/1 beams))

(defun filtered-cmd-helps (beams)
  (lutil-file:filtered #'check-implements-cmd-help/1 beams))

(defun get-loaded-plugin-beams ()
  (filtered-plugins
    (lutil-file:get-loaded-beams
      (lfetool-const:plugin-module-prefix))))

(defun get-loaded-cmd-help-beams ()
  (filtered-cmd-helps
    (lutil-file:get-loaded-beams
      (lfetool-const:plugin-module-prefix))))

(defun get-loaded-plugin-modules ()
  (lists:sort
    (lutil-file:beams->modules
      (get-loaded-plugin-beams))))

(defun get-loaded-cmd-help-modules ()
  (lists:sort
    (lutil-file:beams->modules
      (get-loaded-cmd-help-beams))))

(defun get-loaded-plugin-names ()
  (lists:sort
    (lists:map
      (lambda (x)
        (car
          (lists:reverse
            (string:tokens x "-"))))
      (get-loaded-plugin-beams))))

;; Below is the first implementation I did; benchmarks for 1000 executions
;; reveal no significant benefit to using the one above over it.
;;
;; > (lists:foldl
;;     (lambda (_ acc)
;;       (/ (+ acc (element 1 (timer:tc 'lfetool-plugin
;;                                      'get-loaded-plugin-names-orig '())))
;;          2.0))
;;     0
;;     (lists:seq 1 1000))
;; 451.358493307737
;; > (lists:foldl
;;     (lambda (_ acc)
;;       (/ (+ acc (element 1 (timer:tc 'lfetool-plugin
;;                                      'get-loaded-plugin-names '())))
;;          2.0))
;;     0
;;     (lists:seq 1 1000))
;; 451.7978794544691
;;
;; However, at 10,000 executions, the one above does seem to minutely
;; out-perform the original.
;;
;; More importantly, though, the one above has an execution time of about
;; 600 milliseconds when first started in the LFE REPL (subsequent being
;; around 450 ms). When executing the original in the REPL right after
;; start-up, execution times are 3000 to 4000 ms.
;;
;; (defun get-loaded-plugin-names-orig ()
;;   (lists:map
;;     (lambda (x)
;;       (list_to_atom
;;         (cadr
;;           (re:split (atom_to_list x)
;;                     (lfetool-const:plugin-module-prefix)
;;                     '(#(return list))))))
