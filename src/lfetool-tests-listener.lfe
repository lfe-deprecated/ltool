(defmodule lfetool-tests-listener
  (behaviour eunit_listener)
  (export all))

(defrecord state
  (status (orddict:new))
  (pass 0)
  (fail 0)
  (skip 0)
  (cancel 0)
  (timings '()))

(defun start ()
  (start '()))

(defun start (options)
  (eunit_listener:start (MODULE) options))

(defun init (options)
  (make-state))

(defun get-beam (bin-data)
  (let* (((tuple _ start) (binary:match bin-data (binary "file \"")))
         ((tuple end _) (binary:match bin-data (binary ".beam\"")))
         (len (- end start)))
    (binary_to_list (binary:part bin-data `#(,start ,len)))))

(defun get-module (bin-data)
  (lutil-file:beam->module (get-beam bin-data)))

(defun handle_begin
  (('group (= (list _ (tuple 'desc 'undefined) _ _) data) state)
    'skipping-undefined-desc)
  (('group (= (list _ (tuple 'desc desc) _ _) data) state)
    (case (binary:match desc (binary "file"))
      ('nomatch 'skipping)
      (_ (io:format "~s:~n" (list (get-module desc)))))
    ; (io:format "\tdata: ~p~n" (list data))
    ; (io:format "\tstate: ~p~n" (list state))
    state)
  (('test (= (list _ _ (tuple 'source (tuple mod func arity)) _) data) state)
    (io:format "\t~s ... " (list func))
    ;(io:format "\t\tdata: ~p~n" (list data))
    ;(io:format "\t\tstate: ~p~n" (list state))
    state)
  (('test data state)
    (io:format "\tstarting test ...~n")
    ;(io:format "\t\tdata: ~p~n" (list data))
    ;(io:format "\t\tstate: ~p~n" (list state))
    state)
  )

(defun handle_end
  (('group (list _ _ (tuple 'desc 'undefined) _ _ (tuple 'time time) _) state)
    ; skipping undefined description
    state)
  (('group (= (list _ _ (tuple 'desc desc) _ _ (tuple 'time time) _) data) state)
    (case (binary:match desc (binary "file"))
      ('nomatch 'skipping)
      (_ (io:format "\t~s ~s~s~n~n" (list (color:blackb "time:")
                                        (color:blackb (integer_to_list time))
                                        (color:blackb "ms")))))
    ;(io:format "ending group ...~n")
    ;(io:format "\tdata: ~p~n" (list data))
    ;(io:format "\tstate: ~p~n" (list state))
    state)
  (('group data state)
    ;(io:format "ending group ...~n")
    ;(io:format "\tdata: ~p~n" (list data))
    ;(io:format "\tstate: ~p~n" (list state))
    state)
  (('test (= (list _ (tuple 'status (tuple 'error (tuple 'error error where))) _ _ _ _ _) data) state)
    (io:format (++ (color:red "FAIL") "~n~n\tError:\n"))
    (lfe_io:format "\t\e[31m~p\e[0m~n~n" (list error))
    state)
  (('test (list _ (tuple 'status 'ok) _ _ _ _ _) state)
    (io:format (++ (color:greenb "OK") "~n"))
    state)
  (('test data state)
    (io:format "\tending test ...~n")
    (io:format "\t\tdata: ~p~n" (list data))
    (io:format "\t\tstate: ~p~n" (list state))
    state))

(defun handle_cancel
  ((_ data state)
    state))

(defun terminate
  (((tuple 'ok data) state)
    (lfetool-tests-formatter:display-failures state)
    (lfetool-tests-formatter:display-pending state)
    (lfetool-tests-formatter:display-profile state)
    (lfetool-tests-formatter:display-timing state)
    (lfetool-tests-formatter:display-results data state))
  (((tuple 'error reason) state)
    (io:nl)
    (io:nl)
    (sync_end 'error)))

(defun sync_end (result)
  (receive
    ((tuple 'stop reference reply-to)
      (! reply-to `#(result ,reference ,result))
      'ok)))

